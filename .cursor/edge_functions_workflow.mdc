---
description: 
globs: 
alwaysApply: false
---
# When to use:
Used for creating, and testing edge functions. Mention each step so I know you're following instructions.

## Workflow:
1. CREATION: 
Create the edge function from the root folder, NOT the `supabase` folder. NEVER create the folder manuallly.

Good: `cd ROOT_FOLDER && npx supabase functions new function_name`
Bad: `mkdr supbase/functions/function_name`

2. Confirm the creation of the edge function. DO NOT PROCEED if there was an error.

3. ANALYZE TEMPLATE: 
Use [index.ts](mdc:supabase/functions/chat-v3/index.ts) as an example template example.
- Try / Catch Block
- Import libraries the same way
- Import env variables the same way
- Ignore TS errors
- Always use Deno.serve(async (req) => {});

4. TEST LOCALLY
Run the "invoke locally" CURL command (GET/POST) at the bottom of the file to test its connectivity.

(base) âžœ  ~   curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/hello-world' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
--header 'Content-Type: application/json' \
--data '{"name":"Functions"}'

5. SUMMARIZE
Evaluate the results. 

Mention if the user needs to run it manually.

6. Common Issue: CORS
- Ensure that you follow the template below to include CORS headers such as 
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};


# Commands 

## Serve all Functions locally.
```
npx supabase functions serve  --import-map ./supabase/functions/import_map.json
```

supabase functions serve command includes additional flags to assist developers in debugging Edge Functions via the v8 inspector protocol, allowing for debugging via Chrome DevTools, VS Code, and IntelliJ IDEA for example. Refer to the docs guide for setup instructions.

--inspect

Alias of --inspect-mode brk.
--inspect-mode [ run | brk | wait ]

Activates the inspector capability.
run mode simply allows a connection without additional behavior. It is not ideal for short scripts, but it can be useful for long-running scripts where you might occasionally want to set breakpoints.
brk mode same as run mode, but additionally sets a breakpoint at the first line to pause script execution before any code runs.
wait mode similar to brk mode, but instead of setting a breakpoint at the first line, it pauses script execution until an inspector session is connected.
--inspect-main

Can only be used when one of the above two flags is enabled.
By default, creating an inspector session for the main worker is not allowed, but this flag allows it.
Other behaviors follow the inspect-mode flag mentioned above.
Additionally, the following properties can be customized via supabase/config.toml under edge_runtime section.

inspector_port
The port used to listen to the Inspector session, defaults to 8083.
policy
A value that indicates how the edge-runtime should forward incoming HTTP requests to the worker.
per_worker allows multiple HTTP requests to be forwarded to a worker that has already been created.
oneshot will force the worker to process a single HTTP request and then exit. (Debugging purpose, This is especially useful if you want to reflect changes you've made immediately.)
Usage
supabase functions serve [flags]
Flags
--env-file <string>
Optional
Path to an env file to be populated to the Function environment.

--import-map <string>
Optional
Path to import map file.

--inspect
Optional
Alias of --inspect-mode brk.

--inspect-main
Optional
Allow inspecting the main worker.

--inspect-mode <[ run | brk | wait ]>
Optional
Activate inspector capability for debugging.

--no-verify-jwt
Optional
Disable JWT verification for the Function.


# supabase functions list
List all Functions in the linked Supabase project.

Usage
supabase functions list [flags]
Flags
--project-ref <string>
Optional
Project ref of the Supabase project.

## Troubleshooting Log

### Error: Invalid Worker Creation
InvalidWorkerCreation: worker boot error: failed to create the graph: Relative import path "openai" not prefixed with / or ./ or ../ and not in import map

### Solution: Serve functions from project root with explicit import-map location.
cd /path/to/your/project
npx supabase functions serve --import-map ./supabase/functions/import_map.json


### Error: Worker Boot
worker boot error: failed to create the graph: Module not found
"https://esm.sh/openai@4.10.0/helpers/zod".

### Solution: 
Upgrade the affected packages package in `import_map.json`

### Error: Failed to fetch
From the frontend, it cannot find the function.

### Solution:
Reserve the functiosn
Create a new function using `npx supabase functions new FUNCTION_NAME` and re-serve it.

# How to Import Packages
@import_map.json contains the libraries used, just use 

GOOD: import OpenAI from "openai";
BAD: import OpenAI from "https://deno.land/x/openai@v4.24.0/mod.ts";

## Best Practices
- Don't use `serve`, use Deno.serve - don't worry about the Typescript error.


# Template
// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

// Setup type definitions for built-in Supabase Runtime APIs
import "jsr:@supabase/functions-js/edge-runtime.d.ts";

console.log("Chat Lotus: Hello!!");

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

function handleCors(req: Request) {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }
}

Deno.serve((req) => {
  const corsResponse = handleCors(req);
  if (corsResponse) return corsResponse;
  const data = {
    message: "Chat Lotus: Hello!!",
  };
  return new Response(
    JSON.stringify(data),
    { headers: { ...corsHeaders, "Content-Type": "application/json" } },
  );
});

/* To invoke locally:

  1. Run `supabase start` (see: https://supabase.com/docs/reference/cli/supabase-start)
  2. Make an HTTP request:

  curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/chat-lotus' \
    --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
    --header 'Content-Type: application/json' \
    --data '{"name":"Functions"}'

*/
